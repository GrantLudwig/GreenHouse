{"version":3,"sources":["Clock.js","NextWater.js","ChangeWatering.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","state","time","moment","format","this","intervalID","setInterval","tick","clearInterval","setState","className","React","Component","NextWater","nextWaterMoment","nextWaterOutput","timeTill","axios","get","then","response","data","unix","nextWater","fromNow","Popup","useState","show","setShow","handleClose","Button","variant","size","onClick","block","Modal","onHide","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","type","placeholder","Footer","WateringSettings","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa66201f.chunk.js","sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\n\r\nclass Clock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            time: moment().format('MMMM Do YYYY, h:mm a')\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.intervalID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n    \r\n    tick() {\r\n        this.setState({\r\n            time: moment().format('MMMM Do YYYY, h:mm a')\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <h2 className=\"App-clock\">\r\n                {this.state.time}\r\n            </h2>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;","import React from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nclass NextWater extends React.Component {\r\n    constructor(props) {\r\n        super(props);     \r\n        this.state = {\r\n            nextWaterMoment: \"\",\r\n            nextWaterOutput: \"\",\r\n            timeTill: \"\"\r\n        };\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"Next-water\">\r\n                <h2>Next Water Time:</h2>\r\n                <h3> {this.state.nextWaterOutput} {this.state.timeTill}</h3>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    componentDidMount() {\r\n        axios.get('/back/nextWater').then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({ \r\n                    nextWaterMoment: moment.unix(data.nextWater)\r\n                })\r\n            })\r\n            .then(() => {\r\n                this.setState({\r\n                    nextWaterOutput: this.state.nextWaterMoment.format('h:mm:ss a'),\r\n                    timeTill: this.state.nextWaterMoment.fromNow()\r\n                })\r\n            })\r\n            \r\n        this.intervalID = setInterval(\r\n            () => this.tick(),\r\n            1000\r\n        );\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n    \r\n    tick() {\r\n        this.setState({\r\n            timeTill: this.state.nextWaterMoment.fromNow()\r\n        });\r\n    }\r\n}\r\n\r\nexport default NextWater;","import React from 'react';\nimport axios from 'axios';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport ModalDialog from 'react-bootstrap/ModalDialog';\nimport ModalHeader from 'react-bootstrap/ModalHeader';\nimport ModalTitle from 'react-bootstrap/ModalTitle';\nimport ModalBody from 'react-bootstrap/ModalBody';\nimport ModalFooter from 'react-bootstrap/ModalFooter';\nimport Form from 'react-bootstrap/Form';\nimport Overlay from 'react-bootstrap/Overlay';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass WateringSettings extends React.Component {\n    constructor(props) {\n        super(props);     \n    }\n    \n    render() {\n        return (\n            <div>\n                <br />\n                <Popup/>\n            </div> \n        );\n    }\n}\n\nfunction Popup(props) {        \n    const [show, setShow] = React.useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n        <>\n            <Button variant=\"secondary\" size=\"lg\" onClick={handleShow} block>\n                Change Watering\n            </Button>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Change Watering Values</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form>\n                        <Form.Group controlId=\"timestart\">\n                            <Form.Label>Watering Time Start</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"7:00\"/>\n                        </Form.Group>\n                        <Form.Group controlId=\"timeend\">\n                            <Form.Label>Watering Time End</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"22:00\"/>\n                        </Form.Group>\n                        <Form.Group controlId=\"timebetweenwatering\">\n                            <Form.Label>Water Every</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"1H\"/>\n                        </Form.Group>\n                        <Form.Group controlId=\"WateringDuration\">\n                            <Form.Label>Watering Duration</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"20s\"/>\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => {handleClose();}}>\n                            Save Watering Settings\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nexport default WateringSettings;","import React from 'react';\nimport './App.css';\nimport Clock from './Clock';\nimport NextWater from './NextWater';\nimport WateringSettings from './ChangeWatering';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n            <div className=\"App-header\">\n                <h1>Irrigation System</h1>\n                <Clock></Clock>\n                \n                <br />\n                <Button variant=\"primary\" size=\"lg\">Manually Water</Button>\n                <br />\n                \n                <NextWater></NextWater>\n                <br />\n                \n                <h2>Flow Rate</h2>\n                <h3>Normal</h3>\n                <br />\n                \n                <h2>Watering Times:</h2>\n                <h3>07:00 - 22:00</h3>\n                <br />\n                \n                <h2>Time Between Watering:</h2>\n                <h3>1 hour</h3>\n                <br />\n                \n                <h2>Watering Duration:</h2>\n                <h3>20 seconds</h3>\n                \n                <WateringSettings />\n                \n            </div>\n            </div>\n        )\n\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}